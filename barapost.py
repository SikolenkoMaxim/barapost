#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__version__ = "3.9.a"
# Year, month, day
__last_update_date__ = "2020-01-29"

# |===== Check python interpreter version =====|

import sys

if sys.version_info.major < 3:
    print( "\nYour python interpreter version is " + "%d.%d" % (sys.version_info.major,
        sys.version_info.minor) )
    print("   Please, use Python 3.\a")
    # In python 2 'raw_input' does the same thing as 'input' in python 3.
    # Neither does 'input' in python2.
    if sys.platform.startswith("win"):
        raw_input("Press ENTER to exit:")
    # end if
    exit(1)
# end if

from src.platform import platf_depend_exit

# First search for information-providing options:

if "-h" in sys.argv[1:] or "--help" in sys.argv[1:]:
    print("\n  barapost.py\n  Version {}; {} edition;\n".format(__version__, __last_update_date__))
    print("DESCRIPTION:\n")
    print("""This script is designed for taxonomic annotation of nucleotide sequences by "BLASTing"
  each of them with 'blastn' program from "BLAST+" toolkit and regarding the best hit.\n""")
    print("\"barapost.py\" is meant to be used just after 'prober.py'.\n")

    if "--help" in sys.argv[1:]:
        print("""\"barapost.py\" downloads records-hits from Genbank according to results (`hits_to_download.tsv`)
  generated by "prober.py", builds a database (on your local machine) which consists of downloaded
  sequences, and continues aligning the rest of your with "BLAST+" toolkit.\n""")
        print("Script processes FASTQ and FASTA (as well as '.fastq.gz' and '.fasta.gz') files.\n")
        print("\"barapost.py\" writes (actually appends) it's results in the same TSV file as \"prober.py\" does.\n")
        print("Files processed by this script are meant to be sorted afterwards by 'fastQA5_sorter.py'.\n")
        print("""If you have your own FASTA files that can be used as database to blast against,
  you can omit "prober.py" step and go to "barapost.py" (see `-l` option).""")
        print("----------------------------------------------------------\n")
        print("Default parameters:\n")
        print("- all FASTQ and FASTA files in current directory will be processed;")
        print("- packet size (see '-p' option): 100 sequences;")
        print("- algorithm (see '-a' option): 'megaBlast';")
        print("- numbers of threads to launch ('-t' option): 1 thread.")
        print("----------------------------------------------------------\n")
    # end if

    print("""Files that you want 'barapost.py' to process should be specified as
  positional arguments (see EXAMPLE #2 running detailed (--help) help message).
  Wildcards do work: './barapost.py my_directory/*'' will process all files in 'my_directory'.""")
    print("----------------------------------------------------------\n")
    print("OPTIONS:\n")
    print("""-h (--help) --- show help message.
        '-h' -- brief, '--help' -- full;\n""")
    print("-v (--version) --- show version;\n")
    print("""-d (--indir) --- directory which contains FASTQ of FASTA files meant to be processed.
        I.e. all FASTQ and FASTA files in this direcory will be processed;
        Input files can be gzipped.\n""")
    print("""-p (--packet-size) --- size of the packet, i.e. number of sequence to blast in one request.
        Value: integer number [1, 500]. Default value is 100;\n""")
    print("""-a (--algorithm) --- BLASTn algorithm to use for aligning.
        Available values: 'megaBlast', 'discoMegablast', 'blastn'.
        Default is megaBlast;\n""")
    print("""-r (--taxannot-resdir) --- result directory generated by script 'prober.py'
        This is directory specified to 'prober.py' by '-o' option.
        If you omit 'prober.py' and use your own FASTA files
        to create a database, this directory may not exist before start of 'barapost.py'
        (i.e. it will be a simple output directory).
        Default value is "barapost_result", since it is the default name of
        output directory generated by "prober.py".\n""")
    print("""-l (--local-fasta-to-db) --- your own FASTA file that will be added to downloaded database
        or used instead of it if you omit 'prober.py' step;\n""")
    print("-t (--threads) --- number of threads to launch;")

    if "--help" in sys.argv[1:]:
        print("----------------------------------------------------------\n")
        print("EXAMPLES:\n")
        print("""1. Process all FASTA and FASTQ files in working directory with default settings:\n
  ./barapost.py\n""")
        print("""2. Process all files in the working directory that start with "some_my_fasta". Use default settings:\n
  ./barapost.py some_my_fasta*\n""")
        print("""3. Process one FASTQ file with default settings.
  File 'reads.fastq' has been already processed by "prober.py".
  Results of "prober.py" work are in directory 'prober_outdir':\n
  ./barapost.py reads.fastq -r prober_outdir\n""")
        print("""4. Process FASTQ file and FASTA file with discoMegablast, packet size of 100 sequences.
  Files 'reads.fastq.gz' and 'another_sequences.fasta' have been already processed by "prober.py".
  Results of "prober.py" work are in directory 'prober_outdir':\n
  ./barapost.py reads.fastq.gz another_sequences.fasta -a discoMegablast -p 100 -r prober_outdir\n""")
        print("""5. Process all FASTQ and FASTA files in directory named 'some_dir'.
  All these files have been already processed by "prober.py".
  Results of "prober.py" work are in directory 'prober_outdir':\n
  ./barapost.py -d some_dir -r prober_outdir\n""")
        print("""6. Process file named 'some_reads.fastq'. This file has been already processed by "prober.py".
  Results of "prober.py" work are in directory 'prober_outdir'.
  Sequence from file 'my_own_sequence.fasta' will be included to the database.
  Packet size is 50 sequences. Launch 4 threads.\n
  ./barapost.py some_reads.fastq -p 50 -l my_own_sequence.fasta -t 4 -r prober_outdir""")
     # end if
    platf_depend_exit(0)
# end if

if "-v" in sys.argv[1:] or "--version" in sys.argv[1:]:
    print(__version__)
    platf_depend_exit(0)
# end if

from src.printlog import getwt, get_full_time, printn, printl, println, err_fmt

import os
from re import search as re_search
from glob import glob
import getopt

try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], "hvd:p:a:r:l:t:",
        ["help", "version", "indir=", "packet-size=", "algorithm=", "taxannot-resdir=",
        "local-fasta-to-bd=", "threads="])
except getopt.GetoptError as gerr:
    print( str(gerr) )
    platf_depend_exit(2)
# end try

is_fq_or_fa = lambda f: True if not re_search(r".*\.(m)?f(ast)?(a|q)(\.gz)?$", f) is None else False

# Default values:
fq_fa_list = list()
indir_path = None
packet_size = 100 # default
blast_algorithm = "megaBlast" # default
tax_annot_res_dir = "barapost_result" # default
your_own_fasta_lst = list()
n_thr = 1

# Add positional arguments to fq_fa_list
for arg in args:
    if not is_fq_or_fa(arg):
        print(err_fmt("invalid positional argument: '{}'".format(arg)))
        print("Only FAST(A/Q) files can be specified without an option in command line.")
        platf_depend_exit(1)
    # end if
    if not os.path.exists(arg):
        print(err_fmt("File '{}' does not exist!".format(arg)))
        platf_depend_exit(1)
    # end if
    fq_fa_list.append( os.path.abspath(arg) )
# end for

for opt, arg in opts:

    if opt in ("-r", "--taxannot-resdir"):
        tax_annot_res_dir = os.path.abspath(arg)
    # end if

    elif opt in ("-d", "--indir"):
        if not os.path.exists(arg):
            print(err_fmt("directory '{}' does not exist!".format(arg)))
            platf_depend_exit(1)
        # end if
        
        if not os.path.isdir(arg):
            print(err_fmt("'{}' is not a directory!".format(arg)))
            platf_depend_exit(1)
        # end if
        indir_path = os.path.abspath(arg)

        fq_fa_list.extend(list( filter(is_fq_or_fa, glob("{}{}*".format(indir_path, os.sep))) ))

    elif opt in ("-p", "--packet-size"):
        try:
            packet_size = int(arg)
            if packet_size < 1 or packet_size > 500:
                raise ValueError
            # end if
        except ValueError:
            print(err_fmt("packet_size (-p option) must be integer number from 1 to 500"))
            platf_depend_exit(1)
        # end try

    elif opt in ("-a", "--algorithm"):
        if not arg in ("megaBlast", "discoMegablast", "blastn"):
            print(err_fmt("invalid value specified by '-a' option!"))
            print("Available values: 'megaBlast', 'discoMegablast', 'blastn'")
            platf_depend_exit(1)
        # end if
        
        blast_algorithm = arg


    elif opt in ("-l", "--local-fasta-to-bd"):

        if not os.path.exists(arg):
            print(err_fmt("file '{}' does not exist!".format(arg)))
            platf_depend_exit(1)
        # end if

        your_own_fasta_lst.append(os.path.abspath(arg))

    elif opt in ("-t", "--threads"):
        try:
            n_thr = int(arg)
            if n_thr < 1:
                raise ValueError
            # end if
        except ValueError:
            print(err_fmt("number of threads must be positive integer number!"))
            print(" And here is your value: '{}'".format(arg))
            exit(1)
        # end try
        if n_thr > len(os.sched_getaffinity(0)):
            print("""\nWarning! You have specified {} threads to use
  although {} are available.""".format(n_thr, mp.cpu_count()))
            error = True
            while error:
                reply = input("""\nPress ENTER to switch to {} threads,
  or enter 'c' to continue with {} threads,
  or enter 'q' to exit:>>""".format(mp.cpu_count(), n_thr))
                if reply in ("", 'c', 'q'):
                    error = False
                    if reply == "":
                        n_thr = mp.cpu_count()
                        print("\nNumber of threads switched to {}\n".format(n_thr))
                    elif reply == 'c':
                        pass
                    elif reply == 'q':
                        exit(0)
                    # end if
                else:
                    print("\nInvalid reply!\n")
                # end if
            # end while
        # end if
    # end if
# end for


# If no FASTQ or FASTA file have been found
if len(fq_fa_list) == 0:
    # If input directory was specified -- exit
    if not indir_path is None:
        print(err_fmt("""no input FASTQ or FASTA files specified
    or there is no FASTQ and FASTA files in the input directory.\n"""))
        platf_depend_exit(1)
    
    # If input directory was not specified -- look for FASTQ files in current directory
    else:
        fq_fa_list = list(filter( is_fq_or_fa, glob("{}{}*".format(os.getcwd(), os.sep)) ))
        if len(fq_fa_list) == 0:
            print(err_fmt("there are no FASTQ or FASTA files found to process."))
            platf_depend_exit(1)
        # end if
    # end if
# end if

fq_fa_list.sort()

# Check if 'blast+' tookit is installed
pathdirs = os.environ["PATH"].split(os.pathsep)

# Add '.exe' extention in order to find executables on Windows
if sys.platform.startswith("win"):
    exe_ext = ".exe"
else:
    exe_ext = ""
# end if

for utility in ("blastn"+exe_ext, "makeblastdb"+exe_ext, "makembindex"+exe_ext):

    utility_found = False

    for directory in pathdirs:
        if os.path.exists(directory) and utility in os.listdir(directory):
            utility_found = True
            break
        # end if
    # end for

    if not utility_found:
        print("\tAttention!\n'{}' from blast+ toolkit is not found in your system.".format(utility))
        print("""If this error still occures although you have installed everything 
-- make sure that this program is added to PATH)""")
        platf_depend_exit(1)
    # end if
# end for

acc_fpath = None
is_acc_file = lambda f: False if re_search(r".*hits_to_download.tsv", f) is None else True

try:
    seem_like_acc_files = filter(is_acc_file, os.listdir(tax_annot_res_dir))
except FileNotFoundError:
    # If 'tax_annot_res_dir' does not exist-- obviously there is no accession file
    like_acc_num = 0
else:
    like_acc_num = len(list(seem_like_acc_files))
# end try

db_exists = os.path.exists( os.path.join(tax_annot_res_dir, "local_database") )
if db_exists:
    db_exists = db_exists and len(os.listdir(os.path.join(tax_annot_res_dir, "local_database"))) != 0
# end if

if like_acc_num == 1:
    acc_fpath = os.path.join(tax_annot_res_dir,
    next(filter(is_acc_file, os.listdir(tax_annot_res_dir)))) # form path to accession file
elif like_acc_num == 0 and len(your_own_fasta_lst) != 0:
    if not os.path.exists(tax_annot_res_dir):
        try:
            os.makedirs(tax_annot_res_dir)
        except OSError as oserr:
            print(err_fmt("unable to create result directory"))
            print( str(oserr) )
            print("Prober just tried to create directory '{}' and crushed.".format(tax_annot_res_dir))
            platf_depend_exit(1)
        # end try
    # end if
elif like_acc_num == 0 and len(your_own_fasta_lst) == 0 and db_exists:
    pass
elif like_acc_num > 1:
    printl(logfile_path, err_fmt("multiple files with accession:"))
    for f in filter(is_acc_file, os.listdir(tax_annot_res_dir)):
        printl(logfile_path, "  '{}'".format(f))
    # end for
    print("There should be only one accession file.")
    print("Please, remove odd files and leave only one of them.")
    platf_depend_exit(1)
elif like_acc_num == 0 and len(your_own_fasta_lst) == 0 and not db_exists:

    print(err_fmt("no way to build a database '{}'!".format(tax_annot_res_dir)))
    if like_acc_num == 0:
        print("There is no accession file in directory '{}'".format(tax_annot_res_dir))
    # end if
    if tax_annot_res_dir == "barapost_result":
        print("""Maybe, output directory generated by 'prober.py' hasn't been named 'barapost_result'
    and you have forgotten to specify it with '-r' option.""")
    # end if
    platf_depend_exit(1)
else:
    # Execution should not reach here
    print(err_fmt("fatal error. Please, contact the developer."))
    platf_depend_exit(1)
# end if
del db_exists


from src.platform import get_logfile_path

logfile_path = get_logfile_path("barapost", tax_annot_res_dir)


printl(logfile_path, "\n |=== barapost.py (version {}) ===|\n".format(__version__))
printl(logfile_path,  get_full_time() + "- Start working\n")


indsxml_path = os.path.join(tax_annot_res_dir, "indsxml.gbc.xml")
taxonomy_dir = os.path.join(tax_annot_res_dir, "taxonomy")
if not os.path.isdir(taxonomy_dir):
    os.makedirs(taxonomy_dir)
# end if
taxonomy_path = os.path.join(taxonomy_dir, "taxonomy")


#                       |===== Proceed =====|

printl(logfile_path, " - Logging to '{}'".format(logfile_path))
printl(logfile_path, " - Output directory: '{}';".format(tax_annot_res_dir))
printl(logfile_path, " - Packet size: {} sequences;".format(packet_size))
printl(logfile_path, " - BLAST algorithm: {};".format(blast_algorithm))
printl(logfile_path, " - Threads: {};\n".format(n_thr))

s_letter = '' if len(fq_fa_list) == 1 else 's'
printl(logfile_path, " {} file{} will be processed.".format( len(fq_fa_list), s_letter))
with open(logfile_path, 'a') as logfile:
    logfile.write("Here they are:\n")
    for i, path in enumerate(fq_fa_list):
        logfile.write("    {}. '{}'\n".format(i+1, path))
    # end for
# end with

if not len(your_own_fasta_lst) == 0:
    preposition = " besides downloaded ones" if not acc_fpath is None else ""
    printl(logfile_path, "\n Following FASTA files will be added to database{}:".format(preposition))
    for i, path in enumerate(your_own_fasta_lst):
        printl(logfile_path, "   {}. '{}'".format(i+1, path))
    # end for
# end if

printl(logfile_path, '-'*30 + '\n')

# Algorithms in 'blast+' are named in a little different way comparing to BLAST server.
# In order to provide full cli-interface compatibility with 'prober.py' I will merely change values here.
# I change these values in this function and not globally in order not to influence names of result files.
if blast_algorithm == "megaBlast":
    blast_algorithm = "megablast"
elif blast_algorithm == "discoMegablast":
    blast_algorithm = "dc-megablast"
# end if

# Indexed discontiguous searches are not supported:
#    https://www.ncbi.nlm.nih.gov/books/NBK279668/#usermanual.Megablast_indexed_searches

if blast_algorithm != "dc-megablast" and len(glob(os.path.join(tax_annot_res_dir, "local_database", "*idx"))) != 0:
    use_index = "true"
else:
    use_index = "false"
# end if

from src.barapost_modules.barapost_spec import configure_acc_dict

# It is a dictionary of accessions and record names.
# Accessions are keys, tuples of GI numbers record names are values.
# This dictionary is filled while processing and at the beginning of continuation.
acc_dict = configure_acc_dict(acc_fpath, your_own_fasta_lst, logfile_path)

from src.barapost_modules.build_local_db import build_local_db

# Build a database
local_fasta = build_local_db(acc_dict, tax_annot_res_dir, acc_fpath, your_own_fasta_lst, logfile_path)
if not os.path.exists(local_fasta) and len(glob(os.path.join(tax_annot_res_dir, "local_database", "*.fasta*"))) != 0:
    local_fasta = glob(os.path.join(tax_annot_res_dir, "local_database", "*.fasta*"))[0]
    local_fasta = "".join(local_fasta.partition(".fasta")[0:2])
else:
    print(err_fmt("database menaging error"))
    platf_depend_exit(1)
# end if

# Create temporary directory for query files:
queries_tmp_dir = os.path.join(tax_annot_res_dir, "queries-tmp")
if not os.path.isdir(queries_tmp_dir):
    try:
        os.makedirs(queries_tmp_dir)
    except OSError as oserr:
        printl(logfile_path, err_fmt("unable to create query directory"))
        printl(logfile_path,  str(oserr) )
        printl(logfile_path, "Barapost just tried to create directory '{}' and crushed.".format(queries_tmp_dir))
        platf_depend_exit(1)
    # end try
# end if


# Proceeding.
# The main goal is to isolate processes from one another.
# 
# Two situations are available:
#   1. number of threads <= number of files meant to be processed ('many_files'-parallel mode):
#      Files will be distribured equally among processes.
#      Processes interact with one another only while printing something to the console
#      for user's entertainment.
#   2. number of threads > number of files meant to be processed ('few_files'-parallel mode):
#      Files will be processed one by one. They will be divided into equal blocks,
#      and these blocks will be distributed among processes.
#      Processes interact with one another while writing to result file and
#      while printing something to the console for user's entertainment.

printl(logfile_path, "{} - Starting classification.".format(getwt()))
printn("  Working...")

if n_thr <= len(fq_fa_list):
    if n_thr != 1:

        from src.barapost_modules.parallel_mult_files import process

        process(fq_fa_list, n_thr, packet_size, tax_annot_res_dir,
            blast_algorithm, use_index, logfile_path)

    else:

        from src.barapost_modules.single_thread_mult_files import process

        # Single-thread mode do not differ much from 'many_files'-parallel mode.
        process(fq_fa_list, packet_size, tax_annot_res_dir,
            blast_algorithm, use_index, logfile_path)
    # end if
else:

    from src.barapost_modules.parallel_single_file import process

    for fq_fa_path in fq_fa_list:
        process(fq_fa_path, n_thr, packet_size, tax_annot_res_dir,
            blast_algorithm, use_index, logfile_path)
    # end for
# end if
printl(logfile_path, '\r' + " " * len("  Working..."))

# Remove all in 'queries_tmp_dir'
try:
    for qpath in glob( os.path.join(queries_tmp_dir, '*') ):
        os.unlink(qpath)
    # end for
    os.rmdir(queries_tmp_dir)
except OSError as oserr:
    printl(logfile_path, err_fmt("unable to delete directory '{}'".format(queries_tmp_dir)))
    printl(logfile_path,  str(oserr) )
    printl(logfile_path, "Don't worry -- barapost has completed it's job just fine,")
    printl(logfile_path, "   the only thing that some temporary files are left in the directory mentioned above.\n")
# end try

printl(logfile_path, get_full_time() + "- Task is completed!\n")
platf_depend_exit(0)